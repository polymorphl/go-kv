package main

import (
	"fmt"
	"strconv"
	"strings"
	"time"
)

// StreamID represents a parsed Redis stream ID with timestamp and sequence
type StreamID struct {
	Timestamp int64
	Sequence  int64
}

// parseStreamID parses a Redis stream ID string into timestamp and sequence components.
//
// Examples:
//
//	parseStreamID("*")           // Returns current timestamp with sequence 0
//	parseStreamID("1234-5")       // Returns timestamp 1234, sequence 5
//	parseStreamID("1234-*")       // Returns timestamp 1234, sequence 0
func parseStreamID(id string) (*StreamID, error) {
	if id == "*" {
		return &StreamID{
			Timestamp: time.Now().UnixMilli(),
			Sequence:  0,
		}, nil
	}

	parts := strings.Split(id, "-")
	if len(parts) != 2 {
		return nil, fmt.Errorf("ERR Invalid stream ID format")
	}

	timestampStr, sequenceStr := parts[0], parts[1]

	timestamp, err := parseStreamComponent(timestampStr, time.Now().UnixMilli())
	if err != nil {
		return nil, fmt.Errorf("ERR Invalid timestamp in stream ID")
	}

	sequence, err := parseStreamComponent(sequenceStr, 0)
	if err != nil {
		return nil, fmt.Errorf("ERR Invalid sequence in stream ID")
	}

	return &StreamID{Timestamp: timestamp, Sequence: sequence}, nil
}

// parseStreamComponent parses a stream ID component, handling "*" for auto-generation.
func parseStreamComponent(component string, defaultValue int64) (int64, error) {
	if component == "*" {
		return defaultValue, nil
	}
	return strconv.ParseInt(component, 10, 64)
}

// getLastStreamID extracts and parses the last ID from a stream.
func getLastStreamID(stream []string) (*StreamID, error) {
	if len(stream) == 0 {
		return nil, nil
	}

	lastEntry := stream[len(stream)-1]
	parts := strings.Split(lastEntry, "-")
	if len(parts) != 2 {
		return nil, fmt.Errorf("ERR Invalid stream data format")
	}

	timestamp, err := strconv.ParseInt(parts[0], 10, 64)
	if err != nil {
		return nil, fmt.Errorf("ERR Invalid timestamp in existing stream entry")
	}

	sequence, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		return nil, fmt.Errorf("ERR Invalid sequence in existing stream entry")
	}

	return &StreamID{Timestamp: timestamp, Sequence: sequence}, nil
}

// generateSequenceForTimestamp generates the appropriate sequence number for a given timestamp.
func generateSequenceForTimestamp(timestamp int64, stream []string) int64 {
	if len(stream) == 0 {
		// For empty stream, start at 1 if timestamp is 0, otherwise 0
		if timestamp == 0 {
			return 1
		}
		return 0
	}

	// Get the last entry's sequence and increment
	lastEntry := stream[len(stream)-1]
	lastParts := strings.Split(lastEntry, "-")
	if len(lastParts) != 2 {
		return 0
	}

	lastTimestamp, _ := strconv.ParseInt(lastParts[0], 10, 64)
	lastSequence, _ := strconv.ParseInt(lastParts[1], 10, 64)

	if timestamp == lastTimestamp {
		return lastSequence + 1 // Same timestamp, increment sequence
	}
	return 0 // Different timestamp, start sequence at 0
}

// generateActualID generates the actual Redis stream ID by replacing wildcards with appropriate values.
func generateActualID(id string, stream []string) string {
	if !strings.Contains(id, "*") {
		return id
	}

	if id == "*" {
		timestamp := time.Now().UnixMilli()
		sequence := generateSequenceForTimestamp(timestamp, stream)
		return fmt.Sprintf("%d-%d", timestamp, sequence)
	}

	parts := strings.Split(id, "-")
	if len(parts) != 2 {
		return id // Invalid format, return as-is
	}

	timestampStr, sequenceStr := parts[0], parts[1]

	// Handle timestamp
	var timestamp int64
	if timestampStr == "*" {
		timestamp = time.Now().UnixMilli()
	} else {
		timestamp, _ = strconv.ParseInt(timestampStr, 10, 64)
	}

	// Handle sequence
	var sequence int64
	if sequenceStr == "*" {
		sequence = generateSequenceForTimestamp(timestamp, stream)
	} else {
		sequence, _ = strconv.ParseInt(sequenceStr, 10, 64)
	}

	return fmt.Sprintf("%d-%d", timestamp, sequence)
}

// validateStreamKey validates a Redis stream ID against existing stream entries.
func validateStreamKey(id string, stream []string) (bool, error) {
	// Parse the new ID
	newID, err := parseStreamID(id)
	if err != nil {
		return false, err
	}

	// Check if ID is greater than 0-0
	if newID.Timestamp < 0 || newID.Sequence < 0 {
		return false, fmt.Errorf("ERR The ID specified in XADD must be greater than 0-0")
	}

	// Reject exactly "0-0" only if it was explicitly provided
	// Allow "0-0" if it was auto-generated (e.g., from "*" or "0-*")
	if newID.Timestamp == 0 && newID.Sequence == 0 {
		// Check if this was auto-generated by looking for "*" in the original ID
		if strings.Contains(id, "*") {
			// This was auto-generated, so "0-0" is valid
			return true, nil
		}
		return false, fmt.Errorf("ERR The ID specified in XADD must be greater than 0-0")
	}

	// If stream is empty, any valid ID is acceptable
	if len(stream) == 0 {
		return true, nil
	}

	// Get the last entry ID from the stream
	lastID, err := getLastStreamID(stream)
	if err != nil {
		return false, err
	}

	// Check if new ID is greater than the last entry
	if newID.Timestamp < lastID.Timestamp ||
		(newID.Timestamp == lastID.Timestamp && newID.Sequence <= lastID.Sequence) {
		return false, fmt.Errorf("ERR The ID specified in XADD is equal or smaller than the target stream top item")
	}

	return true, nil
}

// xadd handles the XADD command.
//
// Examples:
//
//	XADD mystream 1-0 message "Hello"           // Explicit ID
//	XADD mystream * message "Hello"             // Auto-generate both timestamp and sequence
//	XADD mystream 0-* message "Hello"           // Auto-generate sequence only
//	XADD mystream *-0 message "Hello"           // Auto-generate timestamp only
func xadd(args []Value) Value {
	if len(args) < 3 {
		return createErrorResponse("ERR wrong number of arguments for 'xadd' command")
	}

	key := args[0].Bulk
	id := args[1].Bulk
	entry, exists := memory[key]

	var actualID string
	var streamIDs []string

	if !exists {
		streamIDs = []string{}
	} else {
		streamIDs = getStreamIDs(entry.Stream)
	}

	actualID = generateActualID(id, streamIDs)
	valid, err := validateStreamKey(actualID, streamIDs)
	if !valid {
		return createErrorResponse(err.Error())
	}

	streamData := parseFieldValuePairs(args)
	streamEntry := StreamEntry{ID: actualID, Data: streamData}

	if !exists {
		entry = MemoryEntry{Stream: []StreamEntry{streamEntry}}
	} else {
		entry.Stream = append(entry.Stream, streamEntry)
	}
	memory[key] = entry

	return Value{Typ: "bulk", Bulk: actualID}
}

// parseFieldValuePairs extracts field-value pairs from command arguments.
func parseFieldValuePairs(args []Value) map[string]string {
	streamData := make(map[string]string)
	for i := 2; i < len(args); i += 2 {
		if i+1 < len(args) {
			field := args[i].Bulk
			value := args[i+1].Bulk
			streamData[field] = value
		}
	}
	return streamData
}

// getStreamIDs extracts stream IDs from existing stream entries.
func getStreamIDs(stream []StreamEntry) []string {
	streamIDs := make([]string, len(stream))
	for i, streamEntry := range stream {
		streamIDs[i] = streamEntry.ID
	}
	return streamIDs
}

// parseBlockParameter parses the BLOCK parameter and returns timeout and streams index.
func parseBlockParameter(args []Value) (int, int) {
	if len(args) >= 2 && strings.ToUpper(args[0].Bulk) == "BLOCK" {
		if len(args) < 4 {
			return 0, -1 // Error case
		}

		timeoutStr := args[1].Bulk
		if timeoutStr == "0" {
			return -1, 2 // Block indefinitely
		}

		if parsedTimeout, err := strconv.Atoi(timeoutStr); err == nil {
			return parsedTimeout, 2
		}
		return 1000, 2 // Default timeout
	}
	return 0, 0 // No blocking
}

// parseStreamArguments validates streams keyword and parses stream arguments.
func parseStreamArguments(args []Value, streamsIndex int) ([]Value, int, error) {
	if args[streamsIndex].Bulk != "streams" {
		return nil, 0, fmt.Errorf("ERR wrong number of arguments for 'xread' command")
	}

	remainingArgs := args[streamsIndex+1:]
	if len(remainingArgs)%2 != 0 || len(remainingArgs) == 0 {
		return nil, 0, fmt.Errorf("ERR wrong number of arguments for 'xread' command")
	}

	return remainingArgs, len(remainingArgs) / 2, nil
}

// convertDollarToLastID converts $ to the actual last entry ID for each stream.
func convertDollarToLastID(remainingArgs []Value, keyCount int) []Value {
	processedArgs := make([]Value, len(remainingArgs))
	copy(processedArgs, remainingArgs)

	for i := 0; i < keyCount; i++ {
		key := remainingArgs[i].Bulk
		startID := remainingArgs[i+keyCount].Bulk

		if startID == "$" {
			if entry, exists := memory[key]; exists && len(entry.Stream) > 0 {
				processedArgs[i+keyCount] = Value{Typ: "bulk", Bulk: entry.Stream[len(entry.Stream)-1].ID}
			} else {
				processedArgs[i+keyCount] = Value{Typ: "bulk", Bulk: "0-0"}
			}
		}
	}
	return processedArgs
}

// blockForNewEntries blocks until new entries are available or timeout occurs.
func blockForNewEntries(processedArgs []Value, keyCount int, blockTimeout int) Value {
	checkInterval := 10 * time.Millisecond

	if blockTimeout == -1 {
		// Block indefinitely
		for {
			time.Sleep(checkInterval)
			if result := checkForNewEntries(processedArgs, keyCount); len(result) > 0 {
				return Value{Typ: "array", Array: result}
			}
		}
	}

	// Block with timeout
	totalWaitTime := time.Duration(blockTimeout) * time.Millisecond
	for elapsed := time.Duration(0); elapsed < totalWaitTime; elapsed += checkInterval {
		time.Sleep(checkInterval)
		if result := checkForNewEntries(processedArgs, keyCount); len(result) > 0 {
			return Value{Typ: "array", Array: result}
		}
	}

	return Value{Typ: "null_array"}
}

// xrange handles the XRANGE command.
//
// Examples:
//
//	XRANGE mystream 1526985054069 1526985054079    // Range between specific IDs
//	XRANGE mystream - +                            // All entries
//	XRANGE mystream 1526985054069 +                // From specific ID to end
func xrange(args []Value) Value {
	if len(args) < 3 {
		return createErrorResponse("ERR wrong number of arguments for 'xrange' command")
	}

	key := args[0].Bulk
	start := args[1].Bulk
	end := args[2].Bulk

	entry, exists := memory[key]
	if !exists {
		// Empty stream - return empty array
		return Value{Typ: "array", Array: []Value{}}
	}

	var result []Value

	for _, streamEntry := range entry.Stream {
		if isInRange(streamEntry.ID, start, end) {
			entryValue := createStreamEntryValue(streamEntry)
			result = append(result, entryValue)
		}
	}

	return Value{Typ: "array", Array: result}
}

// createStreamEntryValue creates a RESP array value representing a stream entry.
func createStreamEntryValue(entry StreamEntry) Value {
	// Create field-value array
	var fieldValueArray []Value
	for field, value := range entry.Data {
		fieldValueArray = append(fieldValueArray,
			Value{Typ: "bulk", Bulk: field},
			Value{Typ: "bulk", Bulk: value},
		)
	}

	// Create entry array: [ID, [field-value pairs]]
	entryArray := []Value{
		{Typ: "bulk", Bulk: entry.ID},
		{Typ: "array", Array: fieldValueArray},
	}

	return Value{Typ: "array", Array: entryArray}
}

// compareStreamIDs compares two Redis stream IDs lexicographically.
func compareStreamIDs(id1, id2 string) int {
	// Handle special Redis stream IDs
	if id1 == "$" || id2 == "$" {
		// $ means "end of stream" - any real ID is greater than $
		if id1 == "$" && id2 != "$" {
			return -1
		} else if id1 != "$" && id2 == "$" {
			return 1
		} else {
			return 0 // both are $
		}
	}

	// Parse both IDs into timestamp-sequence format
	parts1 := strings.Split(id1, "-")
	parts2 := strings.Split(id2, "-")

	// Validate ID format
	if len(parts1) != 2 || len(parts2) != 2 {
		return compareStrings(id1, id2)
	}

	// Parse timestamps
	timestamp1, err1 := strconv.ParseInt(parts1[0], 10, 64)
	timestamp2, err2 := strconv.ParseInt(parts2[0], 10, 64)

	if err1 != nil || err2 != nil {
		return compareStrings(id1, id2)
	}

	// Compare timestamps first
	if timestamp1 < timestamp2 {
		return -1
	} else if timestamp1 > timestamp2 {
		return 1
	}

	// Timestamps are equal, compare sequences
	sequence1, err1 := strconv.ParseInt(parts1[1], 10, 64)
	sequence2, err2 := strconv.ParseInt(parts2[1], 10, 64)

	if err1 != nil || err2 != nil {
		return compareStrings(id1, id2)
	}

	if sequence1 < sequence2 {
		return -1
	} else if sequence1 > sequence2 {
		return 1
	}

	return 0
}

// compareStrings performs a simple string comparison.
func compareStrings(s1, s2 string) int {
	if s1 < s2 {
		return -1
	} else if s1 > s2 {
		return 1
	}
	return 0
}

// isInRange checks if a stream ID is within the specified range (inclusive).
func isInRange(id, start, end string) bool {
	// Handle special Redis range values
	if start == "-" && end == "+" {
		return true // All entries
	}
	if start == "-" {
		return compareStreamIDs(id, end) <= 0
	}
	if end == "+" {
		return compareStreamIDs(id, start) >= 0
	}

	// Both are specific IDs - check if id is between start and end (inclusive)
	return compareStreamIDs(id, start) >= 0 && compareStreamIDs(id, end) <= 0
}

// xread handles the XREAD command for reading from multiple streams.
//
// Examples:
//
//	XREAD streams mystream 0-0                    // Single stream
//	XREAD streams stream1 stream2 0-0 0-1        // Multiple streams
//	XREAD BLOCK 1000 streams mystream 0-0       // Blocking with 1000ms timeout
//	XREAD BLOCK 0 streams mystream $      		// Blocking until new entries are available
func xread(args []Value) Value {
	if len(args) < 3 {
		return createErrorResponse("ERR wrong number of arguments for 'xread' command")
	}

	// Parse BLOCK parameter if present
	blockTimeout, streamsIndex := parseBlockParameter(args)
	if streamsIndex == -1 {
		return createErrorResponse("ERR wrong number of arguments for 'xread' command")
	}

	// Validate streams keyword and parse arguments
	remainingArgs, keyCount, err := parseStreamArguments(args, streamsIndex)
	if err != nil {
		return createErrorResponse(err.Error())
	}

	// Convert $ to actual last entry IDs
	processedArgs := convertDollarToLastID(remainingArgs, keyCount)

	// Check for immediate results
	if result := checkForNewEntries(processedArgs, keyCount); len(result) > 0 {
		return Value{Typ: "array", Array: result}
	}

	// Handle blocking or return empty array
	if blockTimeout == 0 {
		return Value{Typ: "array", Array: []Value{}}
	}
	return blockForNewEntries(processedArgs, keyCount, blockTimeout)
}

// checkForNewEntries checks for new stream entries across multiple streams.
func checkForNewEntries(remainingArgs []Value, keyCount int) []Value {
	var result []Value
	for i := 0; i < keyCount; i++ {
		key := remainingArgs[i].Bulk
		startID := remainingArgs[i+keyCount].Bulk

		streamEntries := getStreamEntriesAfter(key, startID)
		if len(streamEntries) > 0 {
			result = append(result, createStreamResponse(key, streamEntries))
		}
	}
	return result
}

// createStreamResponse creates a stream response array.
func createStreamResponse(key string, entries []Value) Value {
	return Value{
		Typ: "array",
		Array: []Value{
			{Typ: "bulk", Bulk: key},
			{Typ: "array", Array: entries},
		},
	}
}

// getStreamEntriesAfter returns stream entries newer than the given ID.
//
// Examples:
//
//	getStreamEntriesAfter("mystream", "0-0")     // Returns all entries newer than 0-0
//	getStreamEntriesAfter("mystream", "1526985054069-0")  // Returns entries newer than specific ID
//	getStreamEntriesAfter("nonexistent", "0-0") // Returns nil (stream doesn't exist)
func getStreamEntriesAfter(key, startID string) []Value {
	entry, exists := memory[key]
	if !exists {
		return nil
	}

	// Pre-allocate slice with estimated capacity
	result := make([]Value, 0, len(entry.Stream))
	for _, streamEntry := range entry.Stream {
		comparison := compareStreamIDs(streamEntry.ID, startID)
		if comparison > 0 {
			result = append(result, createStreamEntryValue(streamEntry))
		}
	}
	return result
}
