package commands

import (
	"fmt"
	"net"

	"github.com/codecrafters-io/redis-starter-go/app/shared"
)

// psync handles the PSYNC command.
// Usage: PSYNC masterReplID masterReplOffset
// Returns: "FULLRESYNC masterReplID masterReplOffset" followed by RDB file
// This is typically used to synchronize a replica with a master.
func Psync(connID string, args []shared.Value) shared.Value {
	if len(args) < 2 {
		return createErrorResponse("ERR wrong number of arguments for 'psync' command")
	}

	// Check if this is a replica requesting full resync (PSYNC ? -1)
	if args[0].Bulk == "?" && args[1].Bulk == "-1" {
		// Send FULLRESYNC response
		fullResyncResponse := "FULLRESYNC " + shared.StoreState.MasterReplID + " 0"

		// Find the connection to send the RDB file
		if conn, exists := shared.Connections[connID]; exists {
			// Send the FULLRESYNC response first
			writeValue(conn, shared.Value{Typ: "string", Str: fullResyncResponse})

			// Send empty RDB file
			sendEmptyRDB(conn)
		}

		// Return NO_RESPONSE to indicate we've already sent the response directly
		return shared.Value{Typ: shared.NO_RESPONSE, Str: ""}
	}

	// For other PSYNC requests, return FULLRESYNC with master info
	result := "FULLRESYNC " + shared.StoreState.MasterReplID + " 0"
	return shared.Value{Typ: "string", Str: result}
}

// sendEmptyRDB sends an empty RDB file to the replica
// Format: $<length_of_file>\r\n<binary_contents_of_file>
func sendEmptyRDB(conn net.Conn) {
	// Empty RDB file content (minimal valid RDB file)
	// This is a hardcoded empty RDB file for Redis 6.0+
	emptyRDB := []byte{
		0x52, 0x45, 0x44, 0x49, 0x53, 0x30, 0x30, 0x30, 0x31, // REDIS0001
		0xfa, 0x09, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2d, 0x76, 0x65, 0x72, // redis-ver
		0x05, 0x36, 0x2e, 0x30, 0x2e, 0x30, // 6.0.0
		0xfa, 0x0a, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2d, 0x62, 0x69, 0x74, 0x73, // redis-bits
		0xc0, 0x40, // 64
		0xfa, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, // ctime
		0xc2, 0x6d, 0x08, 0xbc, 0x65, // timestamp
		0xfa, 0x08, 0x75, 0x73, 0x65, 0x64, 0x2d, 0x6d, 0x65, 0x6d, // used-mem
		0xc2, 0xb0, 0xc4, 0x10, 0x00, // memory usage
		0xfa, 0x08, 0x61, 0x6f, 0x66, 0x2d, 0x62, 0x61, 0x73, 0x65, // aof-base
		0xc0, 0x00, // 0
		0xff, 0x8f, 0x45, 0x4f, 0x4c, 0x4e, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, // checksum
	}

	// Send the RDB file in the format: $<length>\r\n<binary_contents>
	length := len(emptyRDB)
	rdbResponse := fmt.Sprintf("$%d\r\n", length)

	// Write the length prefix
	conn.Write([]byte(rdbResponse))

	// Write the binary RDB content
	conn.Write(emptyRDB)
}

// writeValue writes a Value to the connection using RESP protocol
func writeValue(conn net.Conn, v shared.Value) error {
	var bytes = v.Marshal()
	_, err := conn.Write(bytes)
	return err
}
