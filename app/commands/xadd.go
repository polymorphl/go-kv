package commands

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/codecrafters-io/redis-starter-go/app/shared"
)

// StreamID represents a parsed Redis stream ID with timestamp and sequence
type StreamID struct {
	Timestamp int64
	Sequence  int64
}

// generateSequenceForTimestamp generates the appropriate sequence number for a given timestamp.
func generateSequenceForTimestamp(timestamp int64, stream []string) int64 {
	if len(stream) == 0 {
		// For empty stream, start at 1 if timestamp is 0, otherwise 0
		if timestamp == 0 {
			return 1
		}
		return 0
	}

	// Get the last entry's sequence and increment
	lastEntry := stream[len(stream)-1]
	lastParts := strings.Split(lastEntry, "-")
	if len(lastParts) != 2 {
		return 0
	}

	lastTimestamp, _ := strconv.ParseInt(lastParts[0], 10, 64)
	lastSequence, _ := strconv.ParseInt(lastParts[1], 10, 64)

	if timestamp == lastTimestamp {
		return lastSequence + 1 // Same timestamp, increment sequence
	}
	return 0 // Different timestamp, start sequence at 0
}

// generateActualID generates the actual Redis stream ID by replacing wildcards with appropriate values.
func generateActualID(id string, stream []string) string {
	if !strings.Contains(id, "*") {
		return id
	}

	if id == "*" {
		timestamp := time.Now().UnixMilli()
		sequence := generateSequenceForTimestamp(timestamp, stream)
		return fmt.Sprintf("%d-%d", timestamp, sequence)
	}

	parts := strings.Split(id, "-")
	if len(parts) != 2 {
		return id // Invalid format, return as-is
	}

	timestampStr, sequenceStr := parts[0], parts[1]

	// Handle timestamp
	var timestamp int64
	if timestampStr == "*" {
		timestamp = time.Now().UnixMilli()
	} else {
		timestamp, _ = strconv.ParseInt(timestampStr, 10, 64)
	}

	// Handle sequence
	var sequence int64
	if sequenceStr == "*" {
		sequence = generateSequenceForTimestamp(timestamp, stream)
	} else {
		sequence, _ = strconv.ParseInt(sequenceStr, 10, 64)
	}

	return fmt.Sprintf("%d-%d", timestamp, sequence)
}

// getStreamIDs extracts stream IDs from existing stream entries.
func getStreamIDs(stream []shared.StreamEntry) []string {
	streamIDs := make([]string, len(stream))
	for i, streamEntry := range stream {
		streamIDs[i] = streamEntry.ID
	}
	return streamIDs
}

// parseFieldValuePairs extracts field-value pairs from command arguments.
func parseFieldValuePairs(args []shared.Value) map[string]string {
	streamData := make(map[string]string)
	for i := 2; i < len(args); i += 2 {
		if i+1 < len(args) {
			field := args[i].Bulk
			value := args[i+1].Bulk
			streamData[field] = value
		}
	}
	return streamData
}

// parseStreamComponent parses a stream ID component, handling "*" for auto-generation.
func parseStreamComponent(component string, defaultValue int64) (int64, error) {
	if component == "*" {
		return defaultValue, nil
	}
	return strconv.ParseInt(component, 10, 64)
}

// parseStreamID parses a Redis stream ID string into timestamp and sequence components.
//
// Examples:
//
//	parseStreamID("*")           // Returns current timestamp with sequence 0
//	parseStreamID("1234-5")       // Returns timestamp 1234, sequence 5
//	parseStreamID("1234-*")       // Returns timestamp 1234, sequence 0
func parseStreamID(id string) (*StreamID, error) {
	if id == "*" {
		return &StreamID{
			Timestamp: time.Now().UnixMilli(),
			Sequence:  0,
		}, nil
	}

	parts := strings.Split(id, "-")
	if len(parts) != 2 {
		return nil, fmt.Errorf("ERR Invalid stream ID format")
	}

	timestampStr, sequenceStr := parts[0], parts[1]

	timestamp, err := parseStreamComponent(timestampStr, time.Now().UnixMilli())
	if err != nil {
		return nil, fmt.Errorf("ERR Invalid timestamp in stream ID")
	}

	sequence, err := parseStreamComponent(sequenceStr, 0)
	if err != nil {
		return nil, fmt.Errorf("ERR Invalid sequence in stream ID")
	}

	return &StreamID{Timestamp: timestamp, Sequence: sequence}, nil
}

// validateStreamKey validates a Redis stream ID against existing stream entries.
func validateStreamKey(id string, stream []string) (bool, error) {
	// Parse the new ID
	newID, err := parseStreamID(id)
	if err != nil {
		return false, err
	}

	// Check if ID is greater than 0-0
	if newID.Timestamp < 0 || newID.Sequence < 0 {
		return false, fmt.Errorf("ERR The ID specified in XADD must be greater than 0-0")
	}

	// Reject exactly "0-0" only if it was explicitly provided
	// Allow "0-0" if it was auto-generated (e.g., from "*" or "0-*")
	if newID.Timestamp == 0 && newID.Sequence == 0 {
		// Check if this was auto-generated by looking for "*" in the original ID
		if strings.Contains(id, "*") {
			// This was auto-generated, so "0-0" is valid
			return true, nil
		}
		return false, fmt.Errorf("ERR The ID specified in XADD must be greater than 0-0")
	}

	// If stream is empty, any valid ID is acceptable
	if len(stream) == 0 {
		return true, nil
	}

	// Get the last entry ID from the stream
	lastID, err := getLastStreamID(stream)
	if err != nil {
		return false, err
	}

	// Check if new ID is greater than the last entry
	if newID.Timestamp < lastID.Timestamp ||
		(newID.Timestamp == lastID.Timestamp && newID.Sequence <= lastID.Sequence) {
		return false, fmt.Errorf("ERR The ID specified in XADD is equal or smaller than the target stream top item")
	}

	return true, nil
}

// getLastStreamID extracts and parses the last ID from a stream.
func getLastStreamID(stream []string) (*StreamID, error) {
	if len(stream) == 0 {
		return nil, nil
	}

	lastEntry := stream[len(stream)-1]
	parts := strings.Split(lastEntry, "-")
	if len(parts) != 2 {
		return nil, fmt.Errorf("ERR Invalid stream data format")
	}

	timestamp, err := strconv.ParseInt(parts[0], 10, 64)
	if err != nil {
		return nil, fmt.Errorf("ERR Invalid timestamp in existing stream entry")
	}

	sequence, err := strconv.ParseInt(parts[1], 10, 64)
	if err != nil {
		return nil, fmt.Errorf("ERR Invalid sequence in existing stream entry")
	}

	return &StreamID{Timestamp: timestamp, Sequence: sequence}, nil
}

// xadd handles the XADD command.
//
// Examples:
//
//	XADD mystream 1-0 message "Hello"           // Explicit ID
//	XADD mystream * message "Hello"             // Auto-generate both timestamp and sequence
//	XADD mystream 0-* message "Hello"           // Auto-generate sequence only
//	XADD mystream *-0 message "Hello"           // Auto-generate timestamp only
func Xadd(args []shared.Value) shared.Value {
	if len(args) < 3 {
		return createErrorResponse("ERR wrong number of arguments for 'xadd' command")
	}

	key := args[0].Bulk
	id := args[1].Bulk
	entry, exists := shared.Memory[key]

	var actualID string
	var streamIDs []string

	if !exists {
		streamIDs = []string{}
	} else {
		streamIDs = getStreamIDs(entry.Stream)
	}

	actualID = generateActualID(id, streamIDs)
	valid, err := validateStreamKey(actualID, streamIDs)
	if !valid {
		return createErrorResponse(err.Error())
	}

	streamData := parseFieldValuePairs(args)
	streamEntry := shared.StreamEntry{ID: actualID, Data: streamData}

	if !exists {
		entry = shared.MemoryEntry{Stream: []shared.StreamEntry{streamEntry}}
	} else {
		entry.Stream = append(entry.Stream, streamEntry)
	}
	shared.Memory[key] = entry

	return shared.Value{Typ: "bulk", Bulk: actualID}
}
